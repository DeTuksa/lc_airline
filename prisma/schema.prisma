// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  firstName String
  lastName  String
  booking   Booking[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Booking {
  id          Int      @id @default(autoincrement())
  userId      Int
  seats       String[]
  noOfTickets Int
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Staff {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  staffId   String   @unique @default(cuid())
  password  String
  firstName String
  lastName  String
  role      Role
  performances Performance[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  employee
  manager
}

model Seat {
  id            Int         @unique @default(autoincrement())
  row           Int
  column        Int
  isBooked      Boolean
  seatingPlan   SeatingPlan @relation(fields: [seatingplanId], references: [id])
  seatingplanId Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model SeatingPlan {
  id        Int      @unique @default(autoincrement())
  layout    Seat[]
  flights Flight[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Flight {
  id        Int      @id @default(autoincrement())
  flightNo  String   @unique @default(cuid())
  seatingPlan SeatingPlan @relation(fields: [seatingPlanId], references: [id])
  seatingPlanId Int
  performances Performance[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Performance {
  id Int @id @default(autoincrement())
  flight   Flight   @relation(fields: [flightId], references: [id])
  flightId Int
  from      String
  to        String
  departure DateTime
  arrival   DateTime
  duration  Int
  price     String
  createdBy Staff @relation(fields: [staffId], references: [id])
  staffId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}